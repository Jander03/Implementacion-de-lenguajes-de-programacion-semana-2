# -*- coding: utf-8 -*-
"""Untitled95.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NRq7kNJNM0Z17xJ5b9mS-_gNh004Z-kY
"""

class Conjunto:
  # para crear el conjunto inicial
  def __init__(self, elementos=None):
    self._datos = []
    if elementos is not None:
      for e in elementos:
        self.agregar(e)

  def agregar(self, elemento):
    if not self.contiene(elemento):
      self._datos.append(elemento)

  def contiene(self, elemento):
    for e in self._datos:
      if e == elemento:
        return True
    return False

  def union(self, otro):
    resultado = Conjunto(self._datos)
    for e in otro._datos:
      if not resultado.contiene(e):
        resultado.agregar(e)
    return resultado

  def interseccion(self, otro):
    resultado = Conjunto()
    for e in self._datos:
      if otro.contiene(e) and not resultado. contiene(e):
        resultado.agregar(e)
    return resultado

  def diferencia(self, otro):
    resultado = Conjunto()
    for e in self._datos:
      if not otro.contiene(e):
        resultado.agregar(e)
    return resultado

  def producto_cartesiano(self, otro):
    pares = []
    for a in self._datos:
      for b in otro._datos:
        pares.append((a, b))
    return Conjunto(pares)

  def __repr__(self):
    return f"Conjunto({self._datos})"

A = Conjunto([1, 2, 3, 4, 5])

B = Conjunto([4, 5, 6, 7, 8])
print("A =", A)
print("B =", B)

A.union(B)

print(A.interseccion(B))

print(A.diferencia(B))
print(B.diferencia(A))

print(A.producto_cartesiano(B))